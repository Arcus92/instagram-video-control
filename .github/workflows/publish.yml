name: Publish
on:
  # Trigger on every tag
  push:
    tags:
      - 'v*'
jobs:
  # Creates the release
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      # Gets the release info
      - name: Get release info
        id: get_release_info
        run: |
          echo ::set-output name=repository::${REPOSITORY_NAME##*/}
          echo ::set-output name=tag::${TAG_REF_NAME##*/}
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}

      # Create the release
      - name: Create release archive
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_release_info.outputs.repository }} ${{ steps.get_release_info.outputs.tag }}
          draft: false
          prerelease: false

      # Stores the release url to a file
      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./release_url.txt

      # Uploads the release url as artifact
      - name: Upload release url
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: ./release_url.txt

  # Publish all version
  publish:
    name: Publish
    strategy:
      matrix:
        target: [ 'firefox', 'chrome' ]
    runs-on: ubuntu-latest
    needs: [ release ]

    steps:
      # Checkout the source code
      - name: Checkout
        uses: actions/checkout@v1

      # Downloads the release url from artifact
      - name: Download release url
        uses: actions/download-artifact@v1
        with:
          name: release_url

      # Gets the release info
      - name: Get release info
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/}
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}

      # Clean the output folder
      - name: Clean
        run: rm -rf ./release-${{ matrix.target }}.zip ./release-${{ matrix.target }}

      # Copy files
      - name: Copy files
        run: cp -r ./content/* ./release-${{ matrix.target }} && cp -r ./${{ matrix.target }}/* ./release-${{ matrix.target }}

      # Create a .zip archive
      - name: Packing archive
        run: cd ./release-${{ matrix.target }} && zip -r ../release-${{ matrix.target }}.zip * && cd ..

      # Upload the release
      - name: Upload release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./release-${{ matrix.target }}.zip
          asset_name: ${{ steps.get_release_info.outputs.file_name }}-${{ matrix.target }}.zip
          asset_content_type: application/zip